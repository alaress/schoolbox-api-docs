openapi: 3.0.2
info:
  version: 1.2.5
  title: Schoolbox API
  description: >
    This document describes the API endpoints that are available to a Schoolbox

    instance.


    This document is current as of Schoolbox version 22.0.0.



    **To generate a JWT in your schoolbox instance.**


    Go to the User Edit in admin. Click on the 3 dots (more) on the right, and
    click `Generate User Token`.

    <img src="data:image/jpeg;base64,
    "
    />


    Examples to get started:


    **cURL:** Get User id 1

    ```

    curl -X GET --location "https://demo.schoolbox.com.au/api/user/1" \
        -H "Content-Type: application/json" \
        -H "Accept: application/json" \
        -H "Authorization: Bearer {{Add your JWT here}}"
    ```

    **Python Requests:** Update user 1's name

    ```

    import requests

    data = {
      "firstName": 'System',
      "lastName": 'Administrator'
    }

    headers={
      "Authorization": "Bearer {{Add your JWT here}}",
      "Accept": "application/json",
      "Content-Type": "application/json"
    }

    req = requests.request('PATCH', 'https://demo.schoolbox.com.au/api/user/1',
    json=data, headers=headers)


    print(req.json())

    ```
  x-api-id: 0609d493-8804-4e97-b5ac-0ed7b3c99db8
  x-audience: external-partner
  contact:
    name: Schoolbox Team
    url: https://schoolbox.com.au
    email: developers@schoolbox.com.au
  x-logo:
    url: ./logo.png
tags:
  - name: session
    x-displayName: Session management
    description: |
      Authenticate and create sessions for users.
  - name: file
    x-displayName: File management
    description: |
      Upload files.
  - name: user
    x-displayName: Users
    description: |
      Create and manage users.
  - name: calendar
    x-displayName: Calendar
    description: |
      Create and manage calendar events.
  - name: discussion
    x-displayName: Discussions
    description: |
      Create and manage discussion threads and comments.
  - name: mobile
    x-displayName: Push Notification
    description: Endpoints for Mobile App Developers to connect and register devices
  - name: news
    x-displayName: News
    description: |
      Create and manage school news (also known as communications).
  - name: assessment
    x-displayName: Assessments
    description: |
      Search and get assessments
servers:
  - url: https://{hostname}.{domain}/
    variables:
      hostname:
        description: >-
          The subdomain of the school's domain name on which Schoolbox is
          hosted.
        default: demo
      domain:
        description: The school's domain name.
        default: schoolbox.com.au
paths:
  /api/user:
    get:
      operationId: userSearch
      tags:
        - user
      summary: Returns users which match a search term and set of filters.
      description: >
        `/api/user?search=rebecca&filter={"username":"rwhite","externalId":"501",

        "email":"user@example.com","role":{"name":"Senior Student", "id":4},

        "campus":{"name":"Secondary", "id":1},"year":{"name":"year 12",
        "id":13},

        "roleType":"student"}&cursor=0&limit=3`
      responses:
        '200':
          $ref: '#/components/responses/user-list'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/cursor'
          default: 5
        - $ref: '#/components/parameters/limit'
          example:
            filter:
              username: rreed
              externalId: 501
              email: example@schoolbox.com.au
              roleType:
                - student
                - parent
                - staff
                - guest
              role: Primary Student
              campus: Secondary
              year: 9
    post:
      operationId: userPost
      tags:
        - user
      summary: Creates a user
      description: |
        minimum fields required:
        ```
        "username": "rwhite",
        "role": {
          "id": 4
        },
        "campus": [
          {
            "id": 1
          }
        ],
        "firstName": "Rebecca"
        }
        ```
      responses:
        '201':
          $ref: '#/components/responses/user-item'
      requestBody:
        $ref: '#/components/requestBodies/user-item'
  /user/token:
    get:
      operationId: userGetTokenForSelf
      tags:
        - user
      summary: Get an authentication token for the current user
      description: >
        Retrieve an authentication token for the user identified by the session

        cookie.


        This endpoint is intended so that in-browser API calls performed within

        a Schoolbox instance may be performed in a manner more in common with

        calls to a remote API.


        This endpoint only makes sense for users authenticated with the
        "session"

        security scheme, as it returns a token which is used by the "bearerAuth"

        scheme.
      security:
        - session: []
      responses:
        '200':
          $ref: '#/components/responses/userToken'
        default:
          $ref: '#/components/responses/problem'
  /user/token/{id}:
    get:
      operationId: userGetTokenForUser
      tags:
        - user
      summary: Get an authentication token for another user
      description: >
        Retrieve an authentication token for another user.


        Only users which are authenticated as a superuser may request a token
        for

        another user.
      responses:
        '200':
          $ref: '#/components/responses/userToken'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
  /api/user/{id}:
    get:
      operationId: userGet
      tags:
        - user
      summary: Returns a user
      responses:
        '200':
          $ref: '#/components/responses/user-item'
        default:
          $ref: '#/components/responses/problem'
    put:
      operationId: userPut
      tags:
        - user
      summary: Updates a user
      responses:
        '200':
          $ref: '#/components/responses/user-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/user-item'
    patch:
      operationId: userPatch
      tags:
        - user
      summary: Updates a subset of a user's fields
      responses:
        '200':
          $ref: '#/components/responses/user-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/user-item'
    delete:
      operationId: userDelete
      tags:
        - user
      summary: Deletes a user
      responses:
        '204':
          description: The resource was deleted successfully.
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/id'
  /api/user/{id}/group:
    get:
      operationId: userGroupMembershipSearch
      tags:
        - user
      summary: Returns the list of groups the user is a member of.
      responses:
        '200':
          $ref: '#/components/responses/userGroupMembership-list'
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/id'
  /api/user/{id}/group/{groupId}:
    put:
      operationId: userGroupMembershipPut
      tags:
        - user
      summary: Updates a user's group membership
      responses:
        '200':
          $ref: '#/components/responses/userGroupMembership-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/userGroupMembership-item'
    patch:
      operationId: userGroupMembershipPatch
      tags:
        - user
      summary: Updates a subset of a user's group membership's fields
      responses:
        '200':
          $ref: '#/components/responses/userGroupMembership-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/userGroupMembership-item'
    delete:
      operationId: userGroupMembershipDelete
      tags:
        - user
      summary: Deletes a user's group membership
      responses:
        '204':
          description: The resource was deleted successfully.
        default:
          $ref: '#/components/responses/problem'
    get:
      operationId: userGroupMembershipGet
      tags:
        - user
      summary: Returns a user's group membership
      responses:
        '200':
          $ref: '#/components/responses/userGroupMembership-item'
        default:
          $ref: '#/components/responses/problem'
    post:
      operationId: userGroupMembershipPost
      tags:
        - user
      summary: Creates a group membership for a user
      responses:
        '201':
          $ref: '#/components/responses/userGroupMembership-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/userGroupMembership-item'
    parameters:
      - $ref: '#/components/parameters/id'
      - name: groupId
        in: path
        required: true
        schema:
          type: integer
          format: int32
          minimum: 1
  /discussion/{contextType}/{contextId}/comments/{id}:
    delete:
      operationId: deleteComment
      tags:
        - discussion
      summary: Deletes a comment
      responses:
        '204':
          description: The resource was deleted successfully.
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
      - $ref: '#/components/parameters/id'
  /discussion/{contextType}/{contextId}/comments/{id}/comments:
    get:
      operationId: getCommentsByParent
      tags:
        - discussion
      summary: Returns child comments for a parent comment
      responses:
        '200':
          $ref: '#/components/responses/discussionComment-list'
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/cursor'
  /discussion/{contextType}/{contextId}/threads/{id}:
    get:
      operationId: getThread
      tags:
        - discussion
      summary: Returns a thread
      responses:
        '200':
          $ref: '#/components/responses/discussionThread-item'
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
      - $ref: '#/components/parameters/id'
  /discussion/{contextType}/{contextId}/threads:
    post:
      operationId: createThread
      tags:
        - discussion
      summary: Creates a thread
      responses:
        '200':
          $ref: '#/components/responses/discussionThread-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/discussionThread-item'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
  /discussion/{contextType}/{contextId}/threads/{id}/comments:
    get:
      operationId: getCommentsByThread
      tags:
        - discussion
      summary: Returns comments for a thread
      responses:
        '200':
          $ref: '#/components/responses/discussionComment-list'
        default:
          $ref: '#/components/responses/problem'
    post:
      operationId: createCommentInThread
      tags:
        - discussion
      summary: Creates a new comment
      responses:
        '200':
          $ref: '#/components/responses/discussionComment-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/discussionComment-item'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/cursor'
  /discussion/{contextType}/{contextId}/threads/{id}/open:
    put:
      operationId: openThread
      tags:
        - discussion
      summary: Open commenting thread
      responses:
        '200':
          description: Enable the thread
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/discussionThread-item'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
      - $ref: '#/components/parameters/id'
  /discussion/{contextType}/{contextId}/threads/{id}/close:
    put:
      operationId: closeThread
      tags:
        - discussion
      summary: Close commenting thread
      responses:
        '200':
          description: Disable the thread
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/discussionThread-item'
    parameters:
      - $ref: '#/components/parameters/discussion-contextType'
      - $ref: '#/components/parameters/discussion-contextId'
      - $ref: '#/components/parameters/id'
  /api/session:
    get:
      operationId: apiSessionGet
      tags:
        - session
      summary: Create a user session via data in the query string
      description: >
        Attempt to authenticate a user based on a JWT passed in the query
        string.
      security: []
      responses:
        '200':
          $ref: '#/components/responses/authentication-successUser'
        '302':
          $ref: '#/components/responses/authentication-successRedirect'
        '400':
          $ref: '#/components/responses/authentication-failed'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/redirect'
        - $ref: '#/components/parameters/jwt'
    post:
      operationId: apiSessionPost
      tags:
        - session
      summary: Create a user session via data in the request body
      description: >
        Attempt to authenticate a user based on either a username/password pair,
        or

        a JWT passed in form data.
      security: []
      responses:
        '200':
          $ref: '#/components/responses/authentication-successUser'
        '302':
          $ref: '#/components/responses/authentication-successRedirect'
        '400':
          $ref: '#/components/responses/authentication-failed'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/redirect'
      requestBody:
        $ref: '#/components/requestBodies/authentication'
  /api/register/{provider}:
    post:
      operationId: mobileRegister
      tags:
        - mobile
      summary: Register Mobile Device
      security: []
      description: >-
        In order to register your app to receive push notifications you first
        need to notify Schoolbox of a valid user and the app identifier. This
        process is handled via a POST call as specified below
      parameters:
        - name: provider
          in: path
          description: >
            The type of device that is connecting to the service.


            As of this version, this is expected to always be "Digistorm". Apple

            (APNS) or Google Android (GCM) are still supported, but deprecated:
            the

            Digistorm provider will handle the sending of notifications via APNS
            or

            GCM internally.
          required: true
          example: Digistorm
          schema:
            type: string
            enum:
              - GCM
              - APNS
              - Digistorm
      responses:
        '201':
          $ref: '#/components/responses/authentication-successUser'
        '400':
          $ref: '#/components/responses/authentication-failed'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/registration'
  /storage/asyncUpload.php:
    post:
      operationId: storageAsyncUpload
      tags:
        - file
      summary: Upload a file to Schoolbox
      description: |
        Upload a file to Schoolbox's internal file storage system.

        This file may then be referenced directly, or provided as an argument to
        another place which accepts file uploads.
      responses:
        default:
          description: |
            A description of a file upload.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                    description: >
                      The HTTP response code, usually 200 for a successful
                      upload.
                  hash:
                    type: string
                    description: >
                      A pointer to the now uploaded file within Schoolbox, in
                      the format

                      `store:$hash`.


                      `store` is the locator used to find the file: `$hash` is
                      its

                      location within the store.
                  message:
                    type: string
                    description: >
                      A user-friendly message for what went wrong with the
                      upload

                      (if anything).
                  meta:
                    type: object
                    description: |
                      File metadata.
                    properties:
                      type:
                        type: string
                        description: |
                          The mimetype of the uploaded file.
                      size:
                        type: integer
                        description: |
                          The uploaded file's size, in bytes.
                      name:
                        type: string
                        description: |
                          The uploaded file's name.
                      file:
                        $ref: '#/components/schemas/file'
                  success:
                    type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                upload:
                  type: string
                  format: binary
                  description: |
                    The file being uploaded.
  /resources/file/{fileId}/ajax:
    patch:
      operationId: filePatch
      tags:
        - file
      summary: Updates a subset of a file's fields
      responses:
        '200':
          $ref: '#/components/responses/file-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/file-item'
  /news/create:
    post:
      operationId: commsNews.postCreate
      tags:
        - news
      summary: Create a news article
      description: >
        Creates a new news article: the article's author will be the currently

        authenticated user.


        The article is not necessarily published yet: this simply saves the
        article

        so that the user may refine it before publishing.
      responses:
        '200':
          $ref: '#/components/responses/save'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/newsItem'
  /news/topics:
    get:
      operationId: commsNews.getTopics
      tags:
        - news
      summary: Get available news topics
      description: >
        Retrieve all available news topics, which may be attached to a news
        article.
      responses:
        '200':
          description: All available news topics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/problem'
  /news/{id}:
    get:
      operationId: commsNews.getDetail
      tags:
        - news
      summary: Get a news article
      responses:
        '200':
          description: |
            A single news article.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSavedForLater:
                    type: boolean
                    description: |
                      Has the authenticated user saved this article for later?
                  article:
                    allOf:
                      - $ref: '#/components/schemas/commonFields'
                      - type: object
                        properties:
                          body:
                            $ref: '#/components/schemas/body'
                          author:
                            $ref: '#/components/schemas/author'
                          status:
                            $ref: '#/components/schemas/status'
                          statusDate:
                            $ref: '#/components/schemas/statusDate'
                          sticky:
                            $ref: '#/components/schemas/sticky'
                          _links:
                            $ref: '#/components/schemas/links'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
    post:
      operationId: commsNews.postUpdate
      tags:
        - news
      summary: Update a news article
      description: >
        Update an existing news article.


        The article is not necessarily published yet: this simply saves the
        article

        so that the user may refine it before publishing.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/save'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        $ref: '#/components/requestBodies/newsItem'
  /news/{id}/delete:
    post:
      operationId: commsNews.postDelete
      tags:
        - news
      summary: Delete a news article
      description: |
        Delete an existing news article.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: |
            A summary of the deleted news item.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: |
                      Was the article successfully deleted?
                  returnUrl:
                    $ref: '#/components/schemas/returnUrl'
        '302':
          $ref: '#/components/responses/redirect'
        default:
          $ref: '#/components/responses/problem'
  /news/moderation/{id}/{status}:
    post:
      operationId: commsNewsModeration.setStatus
      tags:
        - news
      summary: Change the publication status of a news article
      description: |
        Change the publication status of a news article.
      parameters:
        - $ref: '#/components/parameters/id'
        - name: status
          in: path
          description: >
            The status to put the article into.


            - `submit`: put the article into the mod queue

            - `accept`: accept the article for publication

            - `reject`: block the article from being published, or retract it
            from
                        publication
          schema:
            type: string
            enum:
              - submit
              - accept
              - reject
      responses:
        '302':
          $ref: '#/components/responses/redirect'
        default:
          description: |
            A summary of the article's status change.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    description: |
                      * `0`: successfully approved
                      * `1`:
                        * some attributes invalid (if the response code was invalid)
                        * some other user has already put the article in this state,
                          and there is otherwise no difference
                          (if the response code was valid)
                      * `2`: some other user has already put the article in this
                        state, and there is a conflict in the reason for
                        putting it in this state
                      * `3`: the article may not be put into this state
                      * `4`: an unspecified error
                  message:
                    type: string
                    description: |
                      A brief message detailing what succeeded, or went wrong
                  redirect:
                    type: string
                    format: uri
                    description: |
                      A URL to redirect to once the article state changes
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rejectionReason:
                  description: |
                    Why was the article rejected?

                    (Only applies if rejecting the article.)
                  type: string
  /news/saved/:
    get:
      operationId: commsNewsSaveForLater.getList
      tags:
        - news
      summary: Get list of saved articles
      description: |
        Retrieve the IDs of all saved news articles for the authenticated user.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/id'
        default:
          $ref: '#/components/responses/problem'
  /news/saved/{id}/add:
    get:
      operationId: commsNewsSaveForLater.postAdd
      tags:
        - news
      summary: Save an article for later
      description: |
        Save an article for the authenticated user.

        This article will then be returned by the
        [Get list of saved articles](#operation/commsNewsSaveForLater.getList)
        endpoint.
      responses:
        '200':
          content:
            application/json:
              description: |
                Currently always empty for this endpoint.
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
  /news/saved/{id}/remove:
    get:
      operationId: commsNewsSaveForLater.postRemove
      tags:
        - news
      summary: Remove an article from the saved for later list
      description: |
        Remove an article from the authenticated user's saved articles.
      responses:
        '200':
          content:
            application/json:
              description: |
                Currently always empty for this endpoint.
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
  /news/me/articles:
    get:
      operationId: commsNews.getAuthoredArticles
      tags:
        - news
      summary: Get articles written by the authenticated user
      description: |
        Get the list of articles written by the currently authenticated user.
      responses:
        '200':
          description: |
            A list of articles which the authenticated user has written.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/commonFields'
                    - type: object
                      properties:
                        author:
                          $ref: '#/components/schemas/authorNameOnly'
                        sticky:
                          $ref: '#/components/schemas/sticky'
                        readMore:
                          $ref: '#/components/schemas/readMore'
                        _links:
                          $ref: '#/components/schemas/links'
        default:
          $ref: '#/components/responses/problem'
  /news/lists/feed:
    get:
      operationId: commsNews.getListForIndex
      tags:
        - news
      summary: Get articles audienced to the authenticated user
      description: |
        Get the list of articles audienced to the currently authenticated user.
      parameters:
        - $ref: '#/components/parameters/topic'
      responses:
        '200':
          description: |
            A list of articles which are audienced to the authenticated user.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/commonFields'
                    - type: object
                      properties:
                        status:
                          $ref: '#/components/schemas/status'
                        statusDate:
                          $ref: '#/components/schemas/statusDate'
                        readMore:
                          $ref: '#/components/schemas/readMore'
                        metadata:
                          type: object
                          properties:
                            commentCount:
                              type: integer
                              description: >
                                The number of comments on this article.


                                May be null, in which case there are no
                                comments.
                        attachments:
                          type: integer
                          description: |
                            The number of attachments on this article.

                            May be null, in which case there are no attachments.
                        viewedAt:
                          allOf:
                            - description: >
                                The datetime the news article was originally
                                read by the user.


                                May be null, in which case the user has not read
                                the article
                            - $ref: '#/components/schemas/dateTime'
                        _links:
                          $ref: '#/components/schemas/links'
        default:
          $ref: '#/components/responses/problem'
  /news/feed/{key}:
    get:
      operationId: commsNewsFeed.getFeedForUser
      tags:
        - news
      summary: RSS feed of articles for a user
      description: >
        Get the articles for the user (identified by the `$key` parameter) as a
        RSS

        document.


        This endpoint doesn't use the standard security schemes: instead, it
        relies

        upon the `$key` parameter remaining secret.
      security: []
      responses:
        '200':
          description: |
            RSS feed of articles.
          content:
            application/rss+xml:
              schema:
                type: string
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/key'
  /news/lists/folder/{id}:
    get:
      operationId: commsNews.getListForHomepage
      tags:
        - news
      summary: Get articles audienced to the given folder
      description: |
        Get the list of articles audienced to the given folder.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/compactMode'
        - $ref: '#/components/parameters/news-limit'
      responses:
        '200':
          description: |
            A list of articles which are audienced to the given folder.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/commonFields'
                    - type: object
                      properties:
                        body:
                          $ref: '#/components/schemas/body'
                        author:
                          $ref: '#/components/schemas/author'
                        status:
                          $ref: '#/components/schemas/status'
                        statusDate:
                          $ref: '#/components/schemas/statusDate'
        default:
          $ref: '#/components/responses/problem'
  /calendar/event/attendance/{id}:
    get:
      operationId: getCalendarEventAttendance
      tags:
        - calendar
      summary: Get an event's attendees
      description: |
        Retrieves a calendar event's attendance.
      responses:
        '200':
          $ref: '#/components/responses/calendarAttendance-item'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
  /calendar/event/attendance/{id}/create:
    post:
      operationId: postCalendarEventAttendanceCreate
      tags:
        - calendar
      summary: Invite attendees to an event
      description: |
        Creates invitations to the given event, for the given set of users.
      responses:
        '200':
          $ref: '#/components/responses/calendarAttendance-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                guests:
                  description: |
                    A list of user IDs to mark as attending this event.
                  type: array
                  items:
                    type: integer
      parameters:
        - $ref: '#/components/parameters/id'
  /calendar/event/attendance/{id}/accept:
    post:
      operationId: postCalendarEventAttendanceAccept
      tags:
        - calendar
      summary: Accept event invitation
      description: >
        As the authenticated user, accepts the invitation to attend the given
        event.
      responses:
        '200':
          $ref: '#/components/responses/calendarAttendance-item'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
  /calendar/event/attendance/{id}/decline:
    post:
      operationId: postCalendarEventAttendanceDecline
      tags:
        - calendar
      summary: Decline event invitation
      description: |
        As the authenticated user, declines the invitation to attend the given
        event.
      responses:
        '200':
          $ref: '#/components/responses/calendarAttendance-item'
        default:
          $ref: '#/components/responses/problem'
      parameters:
        - $ref: '#/components/parameters/id'
  /calendar/event/attendance/{id}/delete:
    post:
      operationId: postCalendarEventAttendanceDelete
      tags:
        - calendar
      summary: Uninvite attendees from an event
      description: |
        Deletes invitations to the given event, for the given user.
      responses:
        '200':
          $ref: '#/components/responses/calendarAttendance-item'
        default:
          $ref: '#/components/responses/problem'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  description: |
                    A user ID to remove attendance from.
                  type: integer
      parameters:
        - $ref: '#/components/parameters/id'
  /api/assessment:
    get:
      operationId: assessmentSearch
      tags:
        - assessment
      summary: Searches for a list of assessments
      description: >
        `/api/assessment?search=[Final]&filter={"assessmentType":"dueWork","workType":"Formative
        Assessment",

        "folderId":88,"weighted", "commonAssessment": false, "assessmentId":
        256,

        "assessmentName": "English 3/4 [Final]"}&cursor=0&limit=3`
      responses:
        '200':
          $ref: '#/components/responses/assessment-list'
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/cursor'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/filter'
        example:
          assessmentType:
            - dueWork
            - quiz
            - task
            - project
            - LTI
          workType: Formative Assessment
          yearLevel:
            name: Year 9
            id: 3
          contextId: 83
          commonAssessment: false
          weighted: true
          assessmentId: 255
          assessmentName: Turning on the computer
  /api/assessment/{id}:
    get:
      operationId: assessmentGet
      tags:
        - assessment
      summary: Returns an assessment
      responses:
        '200':
          $ref: '#/components/responses/assessment-item'
        default:
          $ref: '#/components/responses/problem'
    parameters:
      - $ref: '#/components/parameters/id'
security:
  - session: []
  - bearerAuth: []
components:
  securitySchemes:
    session:
      type: apiKey
      in: cookie
      name: PHPSESSID
      description: >
        A cookie which represents a session which has already been authenticated
        as a

        particular Schoolbox user.


        The authentication may have occurred via Schoolbox's login form, or via
        a

        third-party identity provider.


        Expect that this security scheme will eventually be deprecated for API

        requests, when an API token based authentication scheme is implemented.
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        A JWT generated for a particular user.


        This token allows the bearer to perform requests within the context of
        the

        user for whom the token was generated.
  parameters:
    search:
      name: search
      in: query
      description: |
        A search term.

        Each endpoint which accepts this parameter will have its own logic for
        determining whether an item matches this search term.

        In addition, each returned item should return how close a match it is
        for this search term.
      schema:
        type: string
      required: true
    filter:
      name: filter
      in: query
      description: |
        A set of filters (if any) which will be used to filter out the list of
        items that this endpoint returns.

        Generally, the structure of this object will match the structure of
        the object that the endpoint returns.

        Values in the object field must equal the value of this key.  
      schema:
        type: object
    cursor:
      name: cursor
      in: query
      description: |
        A generated but decodable pointer to the first record to return.

        Each endpoint whose data accepts a cursor will return a cursor that
        points to the next page of the result set.
      schema:
        $ref: '#/components/schemas/cursor'
    limit:
      name: limit
      in: query
      description: |
        Limit the returned results to this count.

        Each endpoint whose data accepts a limit will limit
        their results to that number.
      schema:
        title: Limit
        description: |
          An option to limit the returned results.

          Each endpoint whose data accepts a limit will limit
          their results to that number.
        type: integer
    id:
      name: id
      in: path
      description: >
        The ID of an item to act upon.


        The type of item that is acted upon is dependent on the endpoint in
        which

        it is included.
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
    discussion-contextType:
      name: contextType
      in: path
      description: >
        The type of item that a thread is associated with.


        Used in conjunction with contextId to find the item with which a thread

        is associated, and then to determine whether the authenticated user has

        permission to perform the requested action.


        The following contexts are currently supported:

        * `comms` (the internal name for [news](/#tag/news))

        * `evidence` (the internal name for learning moments: not yet
        documented)


        It is intended that discussion threads will be introduced to more
        contexts.
      required: true
      schema:
        type: string
        enum:
          - comms
          - evidence
    discussion-contextId:
      name: contextId
      in: path
      description: |
        The unique ID of the item that a thread is associated with.

        Used in conjunction with contextType to find the item with which a
        thread is associated, and then to determine whether the authenticated
        user has permission to perform the requested action.
      required: true
      schema:
        $ref: '#/components/schemas/id'
    redirect:
      name: redirect
      in: query
      description: >
        If provided, a relative path to redirect to upon successful
        authentication.


        If not provided: will fall back to redirecting to an empty relative path
        (/).
      schema:
        type: string
    jwt:
      name: jwt
      in: query
      description: A JWT generated via an oAuth request.
      required: true
      schema:
        type: string
    topic:
      name: topic
      in: query
      description: |
        The machine-readable value (a.k.a. slug) for the selected news topic.
      schema:
        type: string
    key:
      name: key
      in: path
      description: |
        A key which identifies a user.
      required: true
      schema:
        type: string
    compactMode:
      name: c
      in: query
      description: |
        Is compact mode enabled?

        If on, the list of attachments is loaded, and any articles loaded are
        considered as read by the authenticated user.
      schema:
        $ref: '#/components/schemas/queryBoolean'
    news-limit:
      name: l
      in: query
      description: |
        Limit of results to show per page
      schema:
        type: integer
  schemas:
    cursor:
      title: Cursor
      description: |
        A generated but decodable pointer to the first record to return.

        Each endpoint whose data accepts a cursor will return a cursor that
        points to the next page of the result set.
      type: string
    problem:
      title: Problem Details
      description: Schema for RFC 7807 (Problem Details for HTTP APIs)
      readOnly: true
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type
          default: about:blank
        title:
          type: string
          description: A short human-readable summary of the problem type
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
          description: The HTTP status code
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem
        instance:
          type: string
          format: uri
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem
      required:
        - type
        - title
        - status
    id:
      title: ID
      description: Identifying ID number for most objects within Schoolbox
      type: integer
      format: int32
      minimum: 1
    campus:
      title: Campus
      description: |
        A sub-division within the school.

        All users within the school belong to one or more campuses:
        * a teacher may have classes across multiple campuses
        * a student will generally only attend one campus
        * a parent may have children who belong to different campuses
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the campus.
        code:
          type: string
          description: |
            The identifying code for the campus in the school's SIS.
        days:
          type: integer
          minimum: 5
          maximum: 10
          description: The number of days in a cycle for this campus' timetable.
      required:
        - id
      readOnly: true
      example:
        id: 1
        name: Secondary
        code: SEC
        days: 5
    role:
      title: Role
      description: |
        A type of user account at the school. Roles are generally used to group
        users by the type of position that they have at the school.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the role.
        type:
          type: string
          description: |
            The type of this role. Different role types have different levels of
            access to different parts of Schoolbox.
          enum:
            - staff
            - student
            - parent
            - guest
      required:
        - id
      readOnly: true
      example:
        - id: 4
          name: Senior Students
          type: student
    userGroupMembership-readableFields:
      title: Readable Group Membership Fields
      type: object
      properties:
        group:
          title: Group
          description: |
            A group within Schoolbox.

            This contains some of the folder's fields in this context.
          type: object
          properties:
            id:
              $ref: '#/components/schemas/id'
            name:
              description: |
                The name of the group.

                In this context, this is the name of the group's folder.
              example: Basketball
            type:
              description: >
                The level of access that users have to this group.


                * Private: membership is by invitation only

                * Moderated: users may apply for membership, but must be
                approved

                * Free: users may join and leave at any time
              type: string
              enum:
                - private
                - moderated
                - free
            isForceFollow:
              description: |
                The level of subscription that is allowed to this group.

                * false: users may subscribe to this group's events
                * true: users must subscribe to this group's events, and may not
                  unsubscribe
              type: bool
              example: true
            membership:
              description: >
                The type of membership that this user has.


                * Admin: the user is the administrator of this group: they may
                add
                  and remove members, change the group's permissions and disband the
                  group
                * Write: the user may create content within the group

                * Read: the user may view content within the group, and may be
                  notified of and may participate in group events
                * None: the user is not a member of the group
              type: string
              enum:
                - admin
                - write
                - read
                - none
            enrollmentStatus:
              description: >
                The enrollment status of the user for this group.


                * Enrolled: the user is enrolled in the group with the
                'membership' permission

                * Not Enrolled: the user is not enrolled in the group

                * Pending: the user has requested to join the group and is
                currently
                  awaiting approval by a group admin
              type: string
              enum:
                - enrolled
                - notEnrolled
                - pending
            isNotificationsOn:
              description: >
                Is this user subscribed to this group's events? If so, they will
                be

                notified when an event occurs.


                Note that the group administrator may:

                * force Follow, so that users may not opt out of notifications

                * disable Notifications, so that users never receive
                notifications
              type: boolean
            isFavourite:
              description: |
                Does the user have this group set as a favourite
              type: boolean
            _links:
              type: object
              properties:
                homepage:
                  type: string
                  format: uri-reference
                  example: /homepage/83
    userGroupMembership-fields:
      title: Group Membership
      description: |
        A description of the membership a user has within a group.
      type: object
    userGroupMembership-read:
      allOf:
        - $ref: '#/components/schemas/userGroupMembership-readableFields'
        - $ref: '#/components/schemas/userGroupMembership-fields'
    schoolHouse:
      title: School House
      description: |
        A school house which a student may belong to.
      type: object
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the school house.
      readOnly: true
      required:
        - id
      example:
        id: 2
        name: Prospect
    yearLevel:
      title: Year Level
      description: |
        A year level which a student may belong to.
      type: object
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the year level.
      readOnly: true
      required:
        - id
      example:
        id: 13
        name: Year 12
    user-read:
      allOf:
        - $ref: '#/components/schemas/user-readableFields'
        - $ref: '#/components/schemas/user-fields'
    user-readableFields:
      description: |
        Fields that are only relevant when reading a user's value.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
          example: 24
        campus:
          items:
            $ref: '#/components/schemas/campus'
        role:
          $ref: '#/components/schemas/role'
        fullName:
          type: string
          nullable: true
          description: The user's formatted full name.
          example: Ms Rebecca White
        groups:
          description: |
            This user's group memberships.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/userGroupMembership-read'
        schoolHouse:
          $ref: '#/components/schemas/schoolHouse'
        yearLevel:
          $ref: '#/components/schemas/yearLevel'
        guardians:
          description: |
            This user's guardians. (Only applicable if this user is of role
            type: student.)

            Guardians are not necessarily the same thing as parents: a guardian
            is not always the child's parent (e.g. they may be a foster parent
            or other relative), and a parent is not always the child's guardian
            (e.g. the family might have separated).
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/user-read'
          nullable: false
          example:
            - id: 25
              fullName: Janna Reed
              yearLevel: []
              role:
                id: 3
                name: Parent
        students:
          description: |
            This user's students. (Only applicable if this user is of role type:
            parent.)

            Students are not necessarily the same thing as children, for the
            same reason that guardians are not the same thing as parents.

            Generally, the guardian => student relation is symmetrical to the
            student => guardian relation.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/user-read'
          nullable: false
          example: []
        impersonableUsers:
          description: |
            The users whom this user may impersonate within a Schoolbox session.

            This relation is asymmetric: A may impersonate B, but that does not
            imply that B may impersonate A.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/user-read'
          nullable: false
          example:
            - id: 6
              fullName: Eden Reed
              yearLevel:
                id: 3
                name: 3
              role:
                id: 5
                name: Primary Student
        isDeleted:
          type: boolean
          default: false
          description: Is this user deleted?
        email:
          type: string
          format: email
          description: |
            The user's email address for receiving communication from this
            Schoolbox instance, or its users.

            This may be derived from the user's username and the instance's
            hostname (see isEmailDerived); if not, it may be set via the
            altEmail field.
        _links:
          type: object
          properties:
            profile:
              type: string
              format: uri-reference
            avatar:
              type: string
              format: uri-reference
              nullable: true
      required:
        - id
      readOnly: true
    externalId:
      title: External ID
      type: string
      nullable: true
      description: |
        This user's ID in the school's School Information System (SIS).

        This value is used to query the SIS for data that is stored in the SIS,
        in particular:
        * relationships with other users
        * class enrolments
        * timetabled classes
    user-fields:
      title: User
      description: Common fields for users
      type: object
      properties:
        externalId:
          $ref: '#/components/schemas/externalId'
          example: 501
        username:
          type: string
          required: false
          description: |
            The user's username. This will be used as the user's identification
            when they attempt to log into the Schoolbox instance.
          example: rwhite
        superuser:
          type: boolean
          description: |
            Does this user have superuser permissions over the Schoolbox
            instance?
          default: false
        enabled:
          type: boolean
          description: Is this user able to log in to the Schoolbox instance?
          default: true
        title:
          type: string
          nullable: true
          description: The user's title (Mr., Ms., etc.).
          example: Ms
        firstName:
          type: string
          required: true
          description: |
            The user's first name.

            Schoolbox doesn't distinguish between a person's actual first name
            and any other names, and in any case is not the definitive source of
            naming information; therefore in practice this will usually be the
            user's given name.
          example: Rebecca
        lastName:
          type: string
          nullable: true
          description: The user's surname.
          example: White
        isEmailDerived:
          type: boolean
          description: |
            Is this user's email address derived directly from their username
            and the host name of the Schoolbox instance?
        altEmail:
          type: string
          format: email
          nullable: true
          description: |
            The user's email address, if it is not derived from their username
            and hostname.
          example: rwhite@example.com.au
        positionTitle:
          type: string
          nullable: true
          description: |
            The user's job or position title within the school which owns the
            Schoolbox instance.
        isBoarder:
          type: boolean
          description: Is this user a boarder?
        flags:
          type: object
          description: |
            A set of flags which control the behavior of a user's Schoolbox
            session.
          properties:
            showWebmailTab:
              type: boolean
              default: false
              description: Does the Webmail tab display for this user?
            showContacts:
              type: boolean
              description: Does this user's contacts get shown to other users?
            enableTimetable:
              type: boolean
              description: Does this user get to see their timetabled classes?
            showSideNav:
              type: boolean
              description: Does the side navigation show for this user?
            showNotificationsPanel:
              type: boolean
              description: Does the notifications panel show for this user?
            showGradeGraph:
              type: boolean
              description: Does the grade graph show for this user?
            enableEportfolio:
              type: boolean
              default: false
              description: Is this user able to create ePortfolio content?
            useInternalMail:
              type: boolean
              default: false
              description: |
                Does this user use Schoolbox's internal mail system to send
                email?

                If false, they use webmail instead.
            calendarView:
              type: string
              description: Which calendar view will the user default to?
              default: month
              enum:
                - month
                - agendaWeek
                - agendaDay
                - list
    listMetadata:
      title: List metadata
      description: Metadata for lists of items retrieved
      readOnly: true
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: If provided, the number of items in the result set.
        cursor:
          type: object
          properties:
            current:
              allOf:
                - $ref: '#/components/schemas/cursor'
              nullable: true
              description: |
                If set, a cursor to the current page of results.
                Seems redundant, but it does generate a cursor to a request
                made without one.
            next:
              allOf:
                - $ref: '#/components/schemas/cursor'
              nullable: true
              description: If set, a cursor to the next page of results.
          required:
            - current
            - next
    user-readList:
      title: User list
      description: A list of users
      readOnly: true
      type: object
      properties:
        data:
          type: array
          uniqueItems: true
          items:
            allOf:
              - $ref: '#/components/schemas/user-read'
        metadata:
          $ref: '#/components/schemas/listMetadata'
    itemRelation:
      title: Item relation
      description: |
        A relation to another item, consisting only of an ID.

        Generally, this is used within request bodies for specifying that the
        item is to be related to another item, without implying that any
        properties of the related item are to be modified.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
      required:
        - id
    user-writableFields:
      description: |
        Fields that are only relevant when writing a user's value.
      type: object
      properties:
        campus:
          type: array
          required: true
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/itemRelation'
        role:
          required: true
          $ref: '#/components/schemas/itemRelation'
        schoolHouse:
          nullable: true
          $ref: '#/components/schemas/itemRelation'
        yearLevel:
          nullable: true
          $ref: '#/components/schemas/itemRelation'
        impersonableUser:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/itemRelation'
      writeOnly: true
    user-write:
      allOf:
        - $ref: '#/components/schemas/user-writableFields'
        - $ref: '#/components/schemas/user-fields'
    userToken:
      type: object
      properties:
        token:
          type: string
          description: >
            A JSON Web Token (JWT) which authenticates the bearer as a
            particular

            user, and allows the bearer to perform API calls within the context
            of

            that user.


            This token is passed to the Schoolbox API according to the
            "BearerAuth"

            security scheme (i.e. in a HTTP header `Authorization: Bearer
            $token`).
    userGroupMembership-writableFields:
      title: Writable Group Membership Fields
      type: object
      properties:
        membership:
          description: |
            The type of membership that this user has.

            * Admin: the user is the administrator of this group: they may add
              and remove members, change the group's permissions and disband the
              group
            * Write: the user may create content within the group
            * Read: the user may view content within the group, and may be
              notified of and may participate in group events
            * None: the user is not a member of the group
          type: string
          enum:
            - admin
            - write
            - read
            - none
        enrollmentStatus:
          description: >
            The enrollment status of the user for this group.


            * Enrolled: the user is enrolled in the group with the 'membership'
            permission

            * Not Enrolled: the user is not enrolled in the group

            * Pending: the user has requested to join the group and is currently
              awaiting approval by a group admin
          type: string
          enum:
            - enrolled
            - notEnrolled
            - pending
        isNotificationsOn:
          description: |
            Is this user subscribed to this group's events? If so, they will be
            notified when an event occurs.

            Note that the group administrator may:
            * force Follow, so that users may not opt out of notifications
            * disable Notifications, so that users never receive notifications
          type: boolean
        isFavourite:
          description: |
            Does the user have this group set as a favourite
          type: boolean
    userGroupMembership-write:
      allOf:
        - $ref: '#/components/schemas/userGroupMembership-writableFields'
        - $ref: '#/components/schemas/userGroupMembership-fields'
    dateTime:
      title: Datetime
      description: |
        A JSON representation of a datetime.
        For compatibility with existing code, can be defined as either:
        * a RFC3339 string
        * an object, which contains a datetime in several formats
      oneOf:
        - type: string
          format: date-time
        - type: object
          readOnly: true
          deprecated: true
          description: |
            This read-only object representation is deprecated and will be
            removed eventually: it exists only for compatibility with existing
            API endpoints.

            If using this object representation, please use the "json" property
            and perform localization using client-side libraries.
          required:
            - json
          properties:
            database:
              type: string
              description: |
                A database representation of the date.
            unixTimestamp:
              type: integer
              format: int64
              description: |
                The date as a Unix timestamp.
            local:
              type: string
              description: |
                A string representation of the date, localized to the Schoolbox
                instance's settings.
            json:
              type: string
              format: date-time
              description: |
                The date as a RFC3339 string.
    discussionComment-readList:
      title: Comment list
      description: A list of comments
      readOnly: true
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/discussionComment-read'
        metadata:
          $ref: '#/components/schemas/listMetadata'
    discussionThread-read:
      title: Thread
      description: Common fields for discussion threads
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        open:
          type: boolean
          description: Is the thread open for further comments?
        created:
          $ref: '#/components/schemas/dateTime'
        updated:
          $ref: '#/components/schemas/dateTime'
        children:
          allOf:
            - $ref: '#/components/schemas/discussionComment-readList'
          description: A list of direct child comments of this thread
      required:
        - id
        - open
    discussionComment-read:
      title: Comment
      description: Common fields for discussion comments
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        thread:
          $ref: '#/components/schemas/discussionThread-read'
        author:
          allOf:
            - $ref: '#/components/schemas/user-read'
          nullable: true
        content:
          type: string
        created:
          $ref: '#/components/schemas/dateTime'
        updated:
          $ref: '#/components/schemas/dateTime'
        parent:
          allOf:
            - $ref: '#/components/schemas/discussionComment-read'
          description: >
            The direct parent of this comment, if there is one.

            If there is none, this comment is a top-level comment within a
            thread.
          nullable: true
        children:
          allOf:
            - $ref: '#/components/schemas/discussionComment-readList'
          description: A list of direct children of this comment
        visibility:
          description: |
            Which role types may view this comment? If not set, assume all role
            types may view it.
            This is likely to be replaced with a more sophisticated visibility
            system, which encompasses individual roles, role types, folders,
            and who knows what else?
          type: array
          items:
            type: string
            enum:
              - staff
              - parent
              - student
      required:
        - id
        - thread
        - content
    authentication-usernamePassword:
      type: object
      description: Username/Password
      properties:
        username:
          description: The username which identifies the user who logged into the device.
          type: string
        password:
          description: >-
            The password which authenticates the user who logged into the
            device.
          type: string
      required:
        - username
        - password
    authentication-jwt:
      type: object
      description: JWT
      properties:
        jwt:
          description: A JWT generated via an oAuth request.
          type: string
      required:
        - jwt
    registration-base:
      type: object
      description: Mobile App Registration
      properties:
        token:
          description: |
            A unique string used to identify the user on the device.

            Ignored if using the Digistorm provider: otherwise, if not
            provided no device will be registered.
          type: string
        appId:
          description: |
            A unique string to identify the app's identity.
          type: string
        deviceId:
          description: |
            An optional unique string to identify the device identity.

            Stored but not used if using the Digistorm provider: otherwise,
            this is normally not provided or is the same as the app ID due
            to limitations enforced by device makers.
          type: string
      required:
        - appId
    registration-usernamePassword:
      allOf:
        - $ref: '#/components/schemas/authentication-usernamePassword'
        - $ref: '#/components/schemas/registration-base'
    registration-jwt:
      allOf:
        - $ref: '#/components/schemas/authentication-jwt'
        - $ref: '#/components/schemas/registration-base'
    file:
      type: object
      description: >
        A description of how a file is stored in Schoolbox's internal file
        storage,

        and of how it may be retrieved.
      properties:
        hash:
          type: string
          description: |
            The location of the file in the file store.
        mime:
          type: string
          description: |
            The mimetype of the uploaded file.
        size:
          type: integer
          description: |
            The uploaded file's size, in bytes.
        _links:
          type: object
          description: |
            Relevant links for the file.
          properties:
            icon:
              type: string
              description: |
                An icon for the file's mimetype.
              format: uri
            image:
              type: string
              description: |
                An image URL for the file (if it's an image).
              format: uri
            stream:
              type: string
              description: |
                A stream URL for the file (if it's audio or video).
              format: uri
            poster:
              type: string
              description: |
                A poster URL for the file (if it's a video).
              format: uri
    body:
      description: News article body, as raw HTML.
      type: string
    queryBoolean:
      type: integer
      description: |
        A truthy integer value (0 or 1).

        0 evaluates to false; 1 evaluates to true.
      enum:
        - 0
        - 1
      default: 0
    formDateTime:
      title: Form datetime
      description: >
        A datetime as entered via a standard Schoolbox datetime form input.


        The format is dependent on the Schoolbox instance's "Numerical Date
        Format"

        and "Time Format" settings: ideally, this would just be a "datetime"
        format

        but the datetime input was developed before JSON was used for request
        bodies.
      type: string
      example: 22/06/2021 11:28am
    filePointer:
      type: string
      description: >
        A pointer to a file within Schoolbox, in the format:

        `$locator:$location:$filename`


        The variables within the pointer have this meaning:

        * `$locator` represents the strategy for finding the file:
          * `store` for files uploaded to Schoolbox's storage
          * `browse` finds files in Schoolbox's resource browser
          * `myfile` finds files in a Schoolbox user's My Files browser
          * `office365` finds files in an Office365 store
        * `$location` is the location of the file within `$locator`:
          * for `store` this is a file's unique hash
          * for `browse` and `myfile` this is a file ID
          * for `office365` this is the file's unique node
        * `$filename` is the filename that the file will be given once it is
        uploaded
          to wherever it is being uploaded

        See the [Upload a file to Schoolbox](#operation/storageAsyncUpload)

        endpoint for details on how to upload a file, and receive a file

        pointer from that upload.
    audience:
      type: string
      description: |
        A description of a news audience, in one of two formats:
        * for simple audiences: `$entityType:$entityValue:$relationship`
        * for composite audiences: `composite;$relationship;`, then two
          simple audiences, delimited by a `.` character

        The variables within the audience string have this meaning:
        * `$entityType` is the type of audience: currently out of
          `campus`, `folder`, `role`, `school_house`, `year`
        * `$entityValue` is the identifier for the audience, JSON-encoded
          then base64-encoded
        * `$relationship` is the users who are actually in the identified
          audience:
          * `self` for the users associated directly with the audience
          * `teachers_of` for the teachers of users in the audience
          * `parents_of` for the parents of users in the audience

        Composite audiences will only contain users who are in both of the
        simple audiences.
      examples:
        - summary: Simple audience (users in campus ID 1)
          value: campus:IjEi:self
        - summary: Simple audience (parents of users in folder ID 55)
          value: folder:IjU1Ig==:parents_of
        - summary: Simple audience (teachers of users in year ID 9)
          value: folder:Ijki==:teachers_of
        - summary: Composite audience (users in campus ID 2 and year ID 3)
          value: composite;self;campus:IjIi:self.year:IjQi:self
    returnUrl:
      description: >
        A base-64 encoded URL to redirect to, once processing of the entity on
        this

        page is completed.
      type: string
      pattern: ^[a-zA-Z0-9+/]+={0,2}$
    topic:
      type: object
      description: |
        A topic which may be applicable to a news article.
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: |
            A human-readable name for the topic.
        slug:
          type: string
          description: |
            A machine-readable name for the topic.
        sequence:
          type: integer
          description: |
            The order in which this topic will display in a topic list.
    commonFields:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          description: News article title.
          type: string
        blurb:
          description: |
            News article displayed blurb, as raw HTML.

            This is derived from the article's blurb (if any) and body:
            * the blurb is used in full, if provided
            * if not, the body is trimmed
          type: string
        featureImage:
          $ref: '#/components/schemas/file'
        publishAt:
          allOf:
            - description: |
                When was the article published?
            - $ref: '#/components/schemas/dateTime'
        topics:
          type: array
          description: |
            A list of topics which are applicable to the article.
          items:
            $ref: '#/components/schemas/topic'
    author:
      type: object
      description: |
        The author's details.
      properties:
        id:
          $ref: '#/components/schemas/id'
        externalId:
          $ref: '#/components/schemas/externalId'
        firstname:
          type: string
          description: |
            The author's first name (a.k.a. given name).
        lastname:
          type: string
          description: |
            The author's last name (a.k.a. surname).
        title:
          type: string
          description: |
            The author's title.
        fullname:
          type: string
          description: >
            The author's full name: usually, this is the title, first name and
            last

            name joined together.
    status:
      type: string
      description: |
        A human-readable representation of the article's current
        status.

        * `Drafted`: the article is a draft only
        * `Awaiting Moderation`: the article has been submitted
          for approval, but is not yet approved or rejected
        * `Awaiting Publication`: the article has been approved
          for publishing, but its publish date has not been
          reached yet
        * `Rejected`: the article has been rejected for
          publishing
        * `Published`: the article has been published
        * `Archived`: the article has expired; whilst it is no
          longer published, it is still readable in the archive
    statusDate:
      allOf:
        - description: |
            When did the article's status change to its current
            value?
        - $ref: '#/components/schemas/dateTime'
    sticky:
      type: boolean
      description: |
        Is this article sticky?

        If so, it will always display at the top of the list of
        articles.
    link:
      title: Link
      description: |
        A JSON representation of a link to content within Schoolbox.
        For compatibility with existing code, can be defined as either:
        * a URI string
        * an object, which contains a URI string and an `auth` boolean value
      oneOf:
        - type: string
          format: uri
        - type: object
          readOnly: true
          deprecated: true
          description: >
            This read-only object representation is deprecated: the string

            representation should be used instead, and if the authenticated user
            is

            not authorized then no value should be returned at all.
          required:
            - href
          properties:
            href:
              type: string
              format: uri
            auth:
              type: boolean
              nullable: true
              description: >
                Is the currently authenticated user authorized to view the
                resource

                pointed to by `href`?


                If this value is `null`, then it is not known whether the user
                may

                view this resource.
    links:
      type: object
      properties:
        saveForLater:
          allOf:
            - description: >
                Endpoint for [saving this article for
                later](#operation/commsNewsSaveForLater.postAdd).
            - $ref: '#/components/schemas/link'
        unsaveForLater:
          allOf:
            - description: |
                Endpoint for [removing this article from the save
                for later list](#operation/commsNewsSaveForLater.postRemove).
            - $ref: '#/components/schemas/link'
        self:
          allOf:
            - description: >
                Endpoint for [viewing this
                article](#operation/commsNews.getDetail).
            - $ref: '#/components/schemas/link'
        update:
          allOf:
            - description: |
                Endpoint for viewing a HTML form for updating this article.
            - $ref: '#/components/schemas/link'
    authorNameOnly:
      type: object
      description: |
        The author's details: currently, only their name.
      properties:
        fullname:
          type: string
          description: |
            The author's full name.
    readMore:
      type: object
      properties:
        string:
          description: |
            The text to show in this article's "read more" link,
            if any.
          type: string
        available:
          description: |
            Is there a "read more" link?

            It is only available if the "read more" link
            configuration is not empty, and the article has one or
            more of:
            * a feature image
            * a discussion thread
            * a body
          type: boolean
    user-readOnly-deprecated:
      description: >
        The existing set of read-only user fields.


        (The code which outputs a user in this format was built before the user
        API
         was designed, and is expected to be replaced by the user API.)
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        externalId:
          $ref: '#/components/schemas/externalId'
        title:
          type: string
          nullable: true
          description: The user's title (Mr., Ms., etc.).
        firstname:
          type: string
          nullable: true
          description: |
            The user's first name.

            Schoolbox doesn't distinguish between a person's actual first name
            and any other names, and in any case is not the definitive source of
            naming information; therefore in practice this will usually be the
            user's given name.
        lastname:
          type: string
          nullable: true
          description: The user's surname.
      required:
        - id
      readOnly: true
      deprecated: true
    calendarAttendanceStatus:
      description: |
        The status of the user's attendance.

        * null: user is not invited to this event
        * 1: user has not yet responded to the invitation
        * 2: user has accepted the invitation
        * 3: user has declined the invitation
      type: integer
      minimum: 1
      maximum: 3
    calendarAttendance:
      title: Calendar event attendance
      description: >
        A record of the invitees to a calendar event, and whether or not they
        are

        attending.
      readOnly: true
      type: object
      properties:
        level:
          description: >
            The level of attendance which applies to this event.


            * 0: event may not be attended (usually, this means that no users
            will be
               invited to this event; however, it is possible for an event's
               attendance level to change)
            * 1: event attendees may only be invited by the event's creator

            * 2: any user who may view the event may invite themselves to the
            event
          type: integer
          minimum: 0
          maximum: 2
        currentUser:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/user-readOnly-deprecated'
            status:
              allOf:
                - $ref: '#/components/schemas/calendarAttendanceStatus'
                - nullable: true
            canModify:
              description: |
                Can the authenticated user modify the event?
              type: boolean
            canInvite:
              description: |
                Can the authenticated user invite other users to the event?
              type: boolean
        attendees:
          description: |
            A summary of all the invitees of this event.
          type: object
          properties:
            guests:
              description: >
                A list of the event's invitees.


                Not all events have public invitation lists: if this is the
                case, then

                the guest list is hidden from all but the event's creator.
              type: array
              items:
                type: object
                properties:
                  id:
                    description: |
                      The invitee's ID number.
                    type: integer
                  name:
                    description: |
                      The invitee's full name.
                    type: string
                  status:
                    $ref: '#/components/schemas/calendarAttendanceStatus'
            max:
              description: >
                The maximum number of invitees to this event, or null if there
                is no

                maximum.
              type: integer
              nullable: true
            num:
              description: >
                The current total number of invitees to this event.


                This may differ from the number of guests in the guest list, due
                to

                the ability to create events with private invitation lists.
              type: integer
            available:
              description: |
                The number of available invite slots for this event.
              type: integer
              nullable: true
            pending:
              description: >
                The number of invitees for this event whose invitation is
                pending

                response.
              type: integer
            accepted:
              description: |
                The number of invitees for this event whose invitation has been
                accepted.
              type: integer
            declined:
              description: |
                The number of invitees for this event whose invitation has been
                declined.
              type: integer
    folder:
      title: Folder
      description: ''
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the Folder.
        code:
          type: string
          description: |
            Schoolbox Subject Codes
        yearLevel:
          $ref: '#/components/schemas/yearLevel'
      example:
        id: 80
        name: 9A English
        code: 9ENGA
        yearLevel:
          id: 9
          name: Year 10
    assessment-item:
      title: an Assessment Item
      description: An assessment item
      readOnly: true
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
          example: 255
        assessmentType:
          type: string
          enum:
            - dueWork
            - quiz
            - task
            - project
            - LTI
          example: task
        folder:
          $ref: '#/components/schemas/folder'
          description: |
            The folder where the assessment is found
        commonAssessment:
          type: boolean
        workType:
          type: string
          description: |
            System configurable in your Admin Lists Work Types area
          example: Formative Assessment
          yearLevel:
            type: object
            properties:
              name:
                type: string
              id:
                $ref: ./id.yaml
            example:
              name: Year 9
              id: 3
        weighted:
          type: boolean
          example: true
        assessmentName:
          type: string
          example: Turning on the computer
    assessment-list:
      title: Assessment list
      description: A list of assessments
      readOnly: true
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/assessment-item'
    userShort:
      title: User
      description: Short fields for users
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        externalId:
          $ref: '#/components/schemas/externalId'
          example: 501
        title:
          type: string
          nullable: true
          description: The user's title (Mr., Ms., etc.).
          example: Ms
        firstName:
          type: string
          nullable: true
          description: |
            The user's first name.

            Schoolbox doesn't distinguish between a person's actual first name
            and any other names, and in any case is not the definitive source of
            naming information; therefore in practice this will usually be the
            user's given name.
          example: Rebecca
        lastName:
          type: string
          nullable: true
          description: The user's surname.
          example: White
    assessment-feedback-item:
      title: An Assessment feedback item
      description: An Assessment feedback item
      readOnly: true
      type: object
      properties:
        learner:
          $ref: '#/components/schemas/userShort'
        comment:
          type: string
          example: >
            Joffrey,

            Your introduction was very strong, but you did not use the previous
            feedback, which reminded you to add evidence.

            Please consider this for your next essay.
        date:
          $ref: '#/components/schemas/dateTime'
        mark:
          type: string
          example: A
        normalisedMark:
          type: integer
          example: 36
        instructor:
          $ref: '#/components/schemas/userShort'
    assessment-feedback-list:
      title: a list of assessment feedback items
      description: A list of feedback items
      readOnly: true
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - type: object
                properties:
                  id:
                    $ref: '#/components/schemas/id'
                    example: 639
                  title:
                    type: string
                    example: Essay - Final Assessment
                  folder:
                    $ref: '#/components/schemas/folder'
                    description: |
                      The folder where the assessment is found
                  assessmentType:
                    type: string
                    enum:
                      - quiz
                      - task
                      - project
                      - dueWork
                      - LTI
                    example: dueWork
                  commonAssessment:
                    type: boolean
                  weight:
                    type: string
                    example: 1
                  workType:
                    type: string
                    example: Formative Assessment
                    description: |
                      System configurable in your Admin Lists Work Types area
                  markType:
                    type: string
                  participants:
                    $ref: '#/components/schemas/assessment-feedback-item'
  examples:
    problem-unauthorized:
      value:
        type: about:blank
        title: Unauthorized Access
        status: 401
        detail: Authorization is required to access resource with ID=1.
    problem-notFound:
      value:
        type: about:blank
        title: Not Found
        status: 404
        detail: The requested object was not found.
    problem-internalServerError:
      value:
        type: about:blank
        title: Internal Server Error
        status: 500
        detail: >-
          An unexpected error occured when accessing resource with ID=1. This
          error has been logged.
    discussionComment-listEmpty:
      value:
        data: []
        metadata:
          cursor:
            current: bbb
            next: ccc
    discussionComment-listOne:
      value:
        data:
          - id: 1
            thread:
              id: 2
              open: false
              created: '2019-01-01T00:00:00Z'
              updated:
                database: '2019-01-01 00:00:00'
                json: '2019-01-01T00:00:00Z'
                local: 1 Jan 2019 12:00am
                unixTimestamp: 1546300800000
            author:
              id: 1
              externalId: 2
              firstName: Schoolbox
              lastName: User
              _links:
                avatar: /profile?id=1
            content: <p>Some HTML content goes here</p>
            created: '2019-01-01T00:00:00Z'
            updated:
              database: '2019-01-01 00:00:00'
              json: '2019-01-01T00:00:00Z'
              local: 1 Jan 2019 12:00am
              unixTimestamp: 1546300800000
            visibility:
              - staff
              - parent
              - student
        metadata:
          cursor:
            current: bbb
            next: ccc
    discussionComment-listMany:
      value:
        data:
          - id: 2
            thread:
              id: 1
              open: true
              created: '2019-01-01T00:00:00Z'
              updated: '2019-01-01T00:00:00Z'
            author:
              id: 1
              externalId: 2
              firstName: Schoolbox
              lastName: User
              _links:
                avatar: /profile?id=1
            content: <p>Some HTML content goes here</p>
            created:
              database: '2019-01-01 00:00:00'
              json: '2019-01-01T00:00:00Z'
              local: 1 Jan 2019 12:00am
              unixTimestamp: 1546300800000
            updated: '2019-01-01T00:00:00Z'
            visibility:
              - staff
              - parent
              - student
          - id: 3
            thread:
              id: 1
              open: true
              created: '2019-01-01T00:00:00Z'
              updated: '2019-01-01T00:00:00Z'
            author:
              id: 1
              externalId: 2
              firstName: Schoolbox
              lastName: User
              _links:
                avatar: /profile?id=1
            content: <p>This article was modified</p>
            created: '2019-01-02T00:00:00Z'
            updated: '2019-01-02T01:00:00Z'
            visibility:
              - staff
          - id: 4
            thread:
              id: 1
              open: true
              created: '2019-01-01T00:00:00Z'
              updated: '2019-01-01T00:00:00Z'
            author:
              id: 1
              externalId: 2
              firstName: Schoolbox
              lastName: User
              _links:
                avatar: /profile?id=1
            content: >-
              <p>This article was not modified, just the created/updated are in
              different timezone</p>
            created: '2019-01-04T00:00:00Z'
            updated: 2019-01-04T11:00:00+1100
            visibility:
              - staff
              - student
          - id: 5
            thread:
              id: 1
              open: true
              created: '2019-01-01T00:00:00Z'
              updated: '2019-01-01T00:00:00Z'
            author:
              id: 1
              externalId: 2
              firstName: Schoolbox
              lastName: User
              _links:
                avatar: /profile?id=1
            content: >-
              <p>XSS Article: you must escape this <script
              type="text/javascript">alert('XSS')</script></p>
            created: '2019-01-01T00:00:00Z'
            updated: '2019-01-01T00:00:00Z'
            visibility:
              - staff
        metadata:
          cursor:
            current: xxx
            next: yyy
  responses:
    problem:
      description: >
        The response that the API returns if it was unable or unwilling to
        fulfill a

        request.


        If the request's "Accept" header is "application/json", this will
        conform to

        the [RFC7807](https://tools.ietf.org/html/rfc7807) Problem Details

        specification; otherwise, it may be a HTML document which contains a
        textual

        description of the error. For this reason, the "Accept" header should
        always

        be set to "application/json".
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problem'
          examples:
            unauthorized:
              $ref: '#/components/examples/problem-unauthorized'
            notFound:
              $ref: '#/components/examples/problem-notFound'
            internalServerError:
              $ref: '#/components/examples/problem-internalServerError'
        text/html:
          schema:
            description: A HTML description of an error.
            readOnly: true
            type: string
    user-list:
      description: A list of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user-readList'
    user-item:
      description: A user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user-read'
    userToken:
      description: A user token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userToken'
    userGroupMembership-list:
      description: A list of group memberships for a user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userGroupMembership-read'
    userGroupMembership-item:
      description: A group membership
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userGroupMembership-read'
    discussionComment-list:
      description: a list of comments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/discussionComment-readList'
          examples:
            empty:
              $ref: '#/components/examples/discussionComment-listEmpty'
            one:
              $ref: '#/components/examples/discussionComment-listOne'
            many:
              $ref: '#/components/examples/discussionComment-listMany'
        text/html:
          schema:
            type: string
            description: The list of comments, rendered into HTML on the server.
    discussionThread-item:
      description: A thread
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/discussionThread-read'
        text/html:
          schema:
            type: string
            description: The thread, rendered into HTML on the server.
    discussionComment-item:
      description: A single comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/discussionComment-read'
    authentication-successUser:
      description: |
        User information, if the user was successfully authenticated and the
        request was made via JSON.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                description: A schoolbox user ID number
                type: integer
              key:
                description: >-
                  A key for accessing resources on behalf of that user like RSS
                  or VCAL feeds
                type: string
              role:
                description: The role type the user has in Schoolbox
                type: string
                enum:
                  - staff
                  - student
                  - parent
                  - guest
                example: parent
              username:
                description: The user who logged into the device
                type: string
      headers:
        Cookie:
          description: |
            Contains the value of the session cookie as defined in the "session"
            security scheme.
          schema:
            type: string
    authentication-successRedirect:
      description: |
        A redirect to another location within the Schoolbox instance,
        if the user was successfully authenticated and the request was not made
        via JSON.
      headers:
        Cookie:
          description: |
            Contains the value of the session cookie as defined in the "session"
            security scheme.
          schema:
            type: string
    authentication-failed:
      description: Not enough data provided or could not authenticate user
      content:
        text/plain:
          schema:
            type: string
    file-item:
      description: A file
      content:
        application/json:
          schema:
            type: object
            properties:
              fileName:
                type: string
                example: School-Events-PNG-2
              title:
                type: string
                example: School Events
              description:
                type: string
                example: |
                  Banner image for 2022 school events
              hidden:
                type: boolean
                example: false
              mimeType:
                type: string
                example: image/png
              filesize:
                type: integer
                description: file size in bytes
                example: 117407
    save:
      description: |
        A summary of the saved news item's status.
      content:
        application/json:
          schema:
            type: object
            properties:
              articleId:
                $ref: '#/components/schemas/id'
              returnUrl:
                $ref: '#/components/schemas/returnUrl'
              success:
                type: boolean
                description: |
                  Was the article successfully saved?

                  Note this doesn't mean that the article is necessary ready for
                  publishing.
              approveRoute:
                type: string
                format: uri
                description: |
                  The URL via which the user may approve this article.
              submitRoute:
                type: string
                format: uri
                description: |
                  The URL via which the user may submit this article for publish
                  or review.
              updateRoute:
                type: string
                format: uri
                description: |
                  The URL via which the user may update this article.
    redirect:
      description: |
        A redirect to another location within the Schoolbox instance.
      headers:
        Location:
          schema:
            type: string
            format: uri
    calendarAttendance-item:
      description: Calendar event attendance
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/calendarAttendance'
    assessment-list:
      description: A list of assements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/assessment-list'
    assessment-item:
      description: A list of feedback items for an assessment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/assessment-feedback-list'
  requestBodies:
    user-item:
      description: A user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user-write'
    userGroupMembership-item:
      description: A group membership
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userGroupMembership-write'
    discussionThread-item:
      description: A thread
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/discussionThread-read'
    discussionComment-item:
      description: A single comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/discussionComment-read'
    authentication:
      description: |
        Authentication data, either via JWT or username/password.
      content:
        application/x-www-form-urlencoded:
          schema:
            oneOf:
              - $ref: '#/components/schemas/authentication-usernamePassword'
              - $ref: '#/components/schemas/authentication-jwt'
    registration:
      description: |
        A request to create a mobile app registration for a user.

        Includes authentication data, either via JWT or username/password.
      content:
        application/x-www-form-urlencoded:
          schema:
            oneOf:
              - $ref: '#/components/schemas/registration-usernamePassword'
              - $ref: '#/components/schemas/registration-jwt'
    file-item:
      description: A file
      content:
        application/json:
          schema:
            type: object
            properties:
              fileName:
                type: string
                description: |
                  limit of 250 characters
                example: 2022-School-Events
              title:
                type: string
                example: School Events
              description:
                type: string
                description: |
                  limit of 255 characters
                example: |
                  Current
                  Banner image for 2022 school events
              hidden:
                type: boolean
                example: false
    newsItem:
      description: |
        News article information.
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              title:
                description: News article title.
                type: string
              body:
                $ref: '#/components/schemas/body'
              blurb:
                description: >
                  News article blurb, as raw HTML.


                  If provided, the blurb will be displayed as the article's
                  summary:

                  otherwise, a trimmed version the article's body will be used
                  instead.
                type: string
              topics[]:
                description: |
                  A list of IDs of topics to associate with this news article.
                type: array
                items:
                  $ref: '#/components/schemas/id'
              sticky:
                allOf:
                  - description: >
                      Is this article pinned to the top of any list it is
                      within?


                      (Not all users have permission to set this flag.)
                  - $ref: '#/components/schemas/queryBoolean'
              publishAt:
                allOf:
                  - description: |
                      The date at which this article should be published.
                  - $ref: '#/components/schemas/formDateTime'
              expiresAt:
                allOf:
                  - description: |
                      The date at which this article should be archived.
                  - $ref: '#/components/schemas/formDateTime'
              attachment[]:
                type: array
                description: >
                  A single featured image to attach to this news item, supplied
                  as a

                  pointer to a file in Schoolbox. This parameter may be provided
                  no

                  more than once.


                  The pointer will be in the format:
                  `$locator:$location:$filename`;

                  the variables within the pointer have this meaning:

                  * `$locator` represents the strategy for finding the file:
                    * `store` for files uploaded to Schoolbox's storage
                    * `browse` finds files in Schoolbox's resource browser
                    * `myfile` finds files in a Schoolbox user's My Files browser
                    * `office365` finds files in an Office365 store
                  * `$location` is the location of the file within `$locator`:
                    * for `store` this is a file's unique hash
                    * for `browse` and `myfile` this is a file ID
                    * for `office365` this is the file's unique node
                  * `$filename` is the filename that the file will be given once
                  it is
                    uploaded to wherever it is being uploaded

                  See the [Upload a file to
                  Schoolbox](#operation/storageAsyncUpload)

                  endpoint for details on how to upload a file, and receive a
                  file

                  pointer from that upload.
                items:
                  $ref: '#/components/schemas/filePointer'
                maxItems: 1
              attachedFiles[]:
                type: array
                description: >
                  Files to attach to this news item, supplied as pointers to a
                  file in

                  Schoolbox. This parameter may be provided multiple times to
                  attach

                  multiple files.


                  Each pointer will be in the format:
                  `$locator:$location:$filename`;

                  the variables within the pointer have this meaning:

                  * `$locator` represents the strategy for finding the file:
                    * `store` for files uploaded to Schoolbox's storage
                    * `browse` finds files in Schoolbox's resource browser
                    * `myfile` finds files in a Schoolbox user's My Files browser
                    * `office365` finds files in an Office365 store
                  * `$location` is the location of the file within `$locator`:
                    * for `store` this is a file's unique hash
                    * for `browse` and `myfile` this is a file ID
                    * for `office365` this is the file's unique node
                  * `$filename` is the filename that the file will be given once
                  it is
                    uploaded to wherever it is being uploaded

                  See the [Upload a file to
                  Schoolbox](#operation/storageAsyncUpload)

                  endpoint for details on how to upload a file, and receive a
                  file

                  pointer from that upload.
                items:
                  $ref: '#/components/schemas/filePointer'
              audience:
                type: array
                description: >
                  A comma-separated list of audiences for this news item.


                  Each audience will be in one of two formats:

                  * simple audiences: `$entityType:$entityValue:$relationship`

                  * composite audiences: `composite;$relationship;`, then two
                  simple
                    audiences, delimited by a `.` character

                  The variables within each audience string have this meaning:

                  * `$entityType` is the type of audience: currently out of
                    `campus`, `folder`, `role`, `school_house`, `year`
                  * `$entityValue` is the identifier for the audience,
                  JSON-encoded
                    then base64-encoded
                  * `$relationship` is the users who are actually in the
                  identified
                    audience:
                    * `self` for the users associated directly with the audience
                    * `teachers_of` for the teachers of users in the audience
                    * `parents_of` for the parents of users in the audience

                  Composite audiences will only contain users who are in both of
                  the

                  simple audiences.


                  Examples:

                  * `campus:IjEi:self` is a simple audience, targeting users in
                  campus
                    ID 1
                  * `folder:IjU1Ig==:parents_of` is a simple audience, targeting
                    parents of users in folder ID 55
                  * `folder:IjU1Ig==:parents_of` is a simple audience, targeting
                    parents of users in folder ID 55
                  * `folder:Ijki==:teachers_of` is a simple audience, targeting
                    teachers of users in year ID 9
                  * `composite;self;campus:IjIi:self.year:IjQi:self` is a
                  composite
                    audience, targeting the intersection of:
                    * users in campus ID 2
                    * users in year ID 3
                items:
                  $ref: '#/components/schemas/audience'
                minItems: 1
          examples:
            Standard article, no attachments, audienced to campus 1:
              value:
                title: A news article title
                body: |
                  <p>The body of the article, as a <em>HTML fragment</em>.</p>
                blurb: >
                  <p>An optional HTML fragment, which will be used as the short
                  version of

                  the article.</p>
                topics[]:
                  - 1
                  - 2
                  - 3
                sticky: 0
                publishAt: 01/01/2021 12:00am
                expiresAt: 31/12/2021 11:59pm
                attachment[]: null
                attachedFiles[]: null
                audience: |
                  campus:IjEi:self
            Standard article, with attachments, audienced to campus 1 and teachers of year 9:
              value:
                title: A news article title
                body: |
                  <p>The body of the article, as a <em>HTML fragment</em>.</p>
                blurb: >
                  <p>An optional HTML fragment, which will be used as the short
                  version of

                  the article.</p>
                topics[]:
                  - 1
                  - 2
                  - 3
                sticky: 0
                publishAt: 01/01/2021 12:00am
                expiresAt: 31/12/2021 11:59pm
                attachment[]:
                  - store:1111111111:featuredImage.jpg
                attachedFiles[]:
                  - store:1234567890:attachment1.jpg
                  - store:0987654321:attachment2.jpg
                audience:
                  - campus:IjEi:self
                  - folder:Ijki==:teachers_of
          encoding:
            topics[]:
              style: form
            attachment[]:
              style: form
            attachedFiles[]:
              style: form
            audience:
              explode: false
