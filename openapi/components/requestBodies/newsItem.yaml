description: |
  News article information.
content:
  application/x-www-form-urlencoded:
    schema:
      type: object
      properties:
        title:
          description: News article title.
          type: string
        body:
          $ref: ../schemas/news/body.yaml
        blurb:
          description: |
            News article blurb, as raw HTML.

            If provided, the blurb will be displayed as the article's summary:
            otherwise, a trimmed version the article's body will be used instead.
          type: string
        topics:
          description: |
            A list of IDs of topics to associate with this news article.
          type: array
          items:
            $ref: ../schemas/id.yaml
        sticky:
          type: integer
          description: |
            Is this article pinned to the top of any list it is within?
            
            (Not all users have permission to set this flag.)

            A truthy integer value (0 or 1).
            
            0 evaluates to false; 1 evaluates to true.
          enum: [ 0, 1 ]
          default: 0
        publishAt:
          description: |
            The datetime at which this article should be published.
            
            The format is dependent on the Schoolbox instance's "Numerical Date Format"
            and "Time Format" settings: ideally, this would just be a "datetime" format
            but the datetime input was developed before JSON was used for request bodies.
          type: string
          example: 22/06/2021 11:28am
        expiresAt:
          description: |
            The datetime at which this article should be achieved.
            
            The format is dependent on the Schoolbox instance's "Numerical Date Format"
            and "Time Format" settings: ideally, this would just be a "datetime" format
            but the datetime input was developed before JSON was used for request bodies.
          type: string
          example: 22/06/2021 11:28am
        attachment:
          type: array
          nullable: true
          description: |
            A single featured image to attach to this news item, supplied as a
            pointer to a file in Schoolbox. This parameter may be provided no
            more than once.

            The pointer will be in the format: `$locator:$location:$filename`;
            the variables within the pointer have this meaning:
            * `$locator` represents the strategy for finding the file:
              * `store` for files uploaded to Schoolbox's storage
              * `browse` finds files in Schoolbox's resource browser
              * `myfile` finds files in a Schoolbox user's My Files browser
              * `office365` finds files in an Office365 store
            * `$location` is the location of the file within `$locator`:
              * for `store` this is a file's unique hash
              * for `browse` and `myfile` this is a file ID
              * for `office365` this is the file's unique node
            * `$filename` is the filename that the file will be given once it is
              uploaded to wherever it is being uploaded

            See the [Upload a file](#post-/storage/asyncUpload.php)
            endpoint for details on how to upload a file, and receive a file
            pointer from that upload.
          items:
            $ref: ../schemas/filePointer.yaml
          maxItems: 1
        attachedFiles:
          type: array
          nullable: true
          description: |
            Files to attach to this news item, supplied as pointers to a file in
            Schoolbox. This parameter may be provided multiple times to attach
            multiple files.

            Each pointer will be in the format: `$locator:$location:$filename`;
            the variables within the pointer have this meaning:
            * `$locator` represents the strategy for finding the file:
              * `store` for files uploaded to Schoolbox's storage
              * `browse` finds files in Schoolbox's resource browser
              * `myfile` finds files in a Schoolbox user's My Files browser
              * `office365` finds files in an Office365 store
            * `$location` is the location of the file within `$locator`:
              * for `store` this is a file's unique hash
              * for `browse` and `myfile` this is a file ID
              * for `office365` this is the file's unique node
            * `$filename` is the filename that the file will be given once it is
              uploaded to wherever it is being uploaded

            See the [Upload a file](#post-/storage/asyncUpload.php)
            endpoint for details on how to upload a file, and receive a file
            pointer from that upload.
          items:
            $ref: ../schemas/filePointer.yaml
        audience:
          type: string
          description: |
            A comma-separated list of audiences for this news item.

            Each audience will be in one of two formats:
            * simple audiences: `$entityType:$entityValue:$relationship`
            * composite audiences: `composite;$relationship;`, then two simple
              audiences, delimited by a `.` character

            The variables within each audience string have this meaning:
            * `$entityType` is the type of audience: currently out of
              `campus`, `folder`, `role`, `school_house`, `year`
            * `$entityValue` is the identifier for the audience, JSON-encoded
              then base64-encoded
            * `$relationship` is the users who are actually in the identified
              audience:
              * `self` for the users associated directly with the audience
              * `teachers_of` for the teachers of users in the audience
              * `parents_of` for the parents of users in the audience

            Composite audiences will only contain users who are in both of the
            simple audiences.

            Examples:
            * `campus:IjEi:self` is a simple audience, targeting users in campus
              ID 1
            * `folder:IjU1Ig==:parents_of` is a simple audience, targeting
              parents of users in folder ID 55
            * `folder:IjU1Ig==:parents_of` is a simple audience, targeting
              parents of users in folder ID 55
            * `folder:Ijki==:teachers_of` is a simple audience, targeting
              teachers of users in year ID 9
            * `composite;self;campus:IjIi:self.year:IjQi:self` is a composite
              audience, targeting the intersection of:
              * users in campus ID 2
              * users in year ID 3
      required:
        - title
        - publishAt
        - expiresAt
        - audience
    examples:
      Standard article, no attachments, audienced to campus 1:
        value:
          title: A news article title
          body: |
            <p>The body of the article, as a <em>HTML fragment</em>.</p>
          blurb: |
            <p>An optional HTML fragment, which will be used as the short version of
            the article.</p>
          topics: [ 1, 2, 3 ]
          sticky: 0
          publishAt: 01/01/2021 12:00am
          expiresAt: 31/12/2021 11:59pm
          attachment: null
          attachedFiles: null
          audience: |
            campus:IjEi:self

      Standard article, with attachments, audienced to campus 1 and teachers of year 9:
        value:
          title: A news article title
          body: |
            <p>The body of the article, as a <em>HTML fragment</em>.</p>
          blurb: |
            <p>An optional HTML fragment, which will be used as the short version of
            the article.</p>
          topics: [ 1, 2, 3 ]
          sticky: 0
          publishAt: 01/01/2021 12:00am
          expiresAt: 31/12/2021 11:59pm
          attachment: [ "store:1111111111:featuredImage.jpg" ]
          attachedFiles: [ "store:1234567890:attachment1.jpg", "store:0987654321:attachment2.jpg" ]
          audience: campus:IjEi:self,folder:Ijki==:teachers_of

    encoding:
      topics:
        style: form
      attachment:
        style: form
      attachedFiles:
        style: form
      audience:
        explode: false
